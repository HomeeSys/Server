// <auto-generated />
using System;
using Devices.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Devices.Infrastructure.Migrations
{
    [DbContext(typeof(DevicesDBContext))]
    [Migration("20250928105607_Delet descrin")]
    partial class Deletdescrin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Devices.Domain.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DeviceNumber")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("This is unique name for device");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementConfigId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TimestampConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceNumber")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimestampConfigurationId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Devices.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("This is unique name for device");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Devices.Domain.Models.MeasurementConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AirIonizationLevel")
                        .HasColumnType("bit");

                    b.Property<bool>("Airflow")
                        .HasColumnType("bit");

                    b.Property<bool>("Ammonia")
                        .HasColumnType("bit");

                    b.Property<bool>("CarbonDioxide")
                        .HasColumnType("bit");

                    b.Property<bool>("CarbonMonoxide")
                        .HasColumnType("bit");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("Formaldehyde")
                        .HasColumnType("bit");

                    b.Property<bool>("Humidity")
                        .HasColumnType("bit");

                    b.Property<bool>("Illuminance")
                        .HasColumnType("bit");

                    b.Property<bool>("Oxygen")
                        .HasColumnType("bit");

                    b.Property<bool>("Ozone")
                        .HasColumnType("bit");

                    b.Property<bool>("PM1")
                        .HasColumnType("bit");

                    b.Property<bool>("PM10")
                        .HasColumnType("bit");

                    b.Property<bool>("PM25")
                        .HasColumnType("bit");

                    b.Property<bool>("Radon")
                        .HasColumnType("bit");

                    b.Property<bool>("SoundLevel")
                        .HasColumnType("bit");

                    b.Property<bool>("Temperature")
                        .HasColumnType("bit");

                    b.Property<bool>("VolatileOrganicCompounds")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("MeasurementConfigs");
                });

            modelBuilder.Entity("Devices.Domain.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Devices.Domain.Models.TimestampConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Timestamp measurement configuration stored in CRON format");

                    b.HasKey("Id");

                    b.ToTable("TimestampConfigurations");
                });

            modelBuilder.Entity("Devices.Domain.Models.Device", b =>
                {
                    b.HasOne("Devices.Domain.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devices.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devices.Domain.Models.TimestampConfiguration", "TimestampConfiguration")
                        .WithMany()
                        .HasForeignKey("TimestampConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Status");

                    b.Navigation("TimestampConfiguration");
                });

            modelBuilder.Entity("Devices.Domain.Models.MeasurementConfig", b =>
                {
                    b.HasOne("Devices.Domain.Models.Device", "Device")
                        .WithOne("MeasurementConfig")
                        .HasForeignKey("Devices.Domain.Models.MeasurementConfig", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Devices.Domain.Models.Device", b =>
                {
                    b.Navigation("MeasurementConfig")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
